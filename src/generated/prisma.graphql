input AddressCreateInput {
  id: ID
  city: String!
  country: String!
  state: String!
  Postal_code: String!
}

input AddressCreateManyInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

type AddressPreviousValues {
  id: ID!
  city: String!
  country: String!
  state: String!
  Postal_code: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AddressScalarWhereInput {
  # Logical AND on all given filters.
  AND: [AddressScalarWhereInput!]

  # Logical OR on all given filters.
  OR: [AddressScalarWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [AddressScalarWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  city: String

  # All values that are not equal to given value.
  city_not: String

  # All values that are contained in given list.
  city_in: [String!]

  # All values that are not contained in given list.
  city_not_in: [String!]

  # All values less than the given value.
  city_lt: String

  # All values less than or equal the given value.
  city_lte: String

  # All values greater than the given value.
  city_gt: String

  # All values greater than or equal the given value.
  city_gte: String

  # All values containing the given string.
  city_contains: String

  # All values not containing the given string.
  city_not_contains: String

  # All values starting with the given string.
  city_starts_with: String

  # All values not starting with the given string.
  city_not_starts_with: String

  # All values ending with the given string.
  city_ends_with: String

  # All values not ending with the given string.
  city_not_ends_with: String

  #
  country: String

  # All values that are not equal to given value.
  country_not: String

  # All values that are contained in given list.
  country_in: [String!]

  # All values that are not contained in given list.
  country_not_in: [String!]

  # All values less than the given value.
  country_lt: String

  # All values less than or equal the given value.
  country_lte: String

  # All values greater than the given value.
  country_gt: String

  # All values greater than or equal the given value.
  country_gte: String

  # All values containing the given string.
  country_contains: String

  # All values not containing the given string.
  country_not_contains: String

  # All values starting with the given string.
  country_starts_with: String

  # All values not starting with the given string.
  country_not_starts_with: String

  # All values ending with the given string.
  country_ends_with: String

  # All values not ending with the given string.
  country_not_ends_with: String

  #
  state: String

  # All values that are not equal to given value.
  state_not: String

  # All values that are contained in given list.
  state_in: [String!]

  # All values that are not contained in given list.
  state_not_in: [String!]

  # All values less than the given value.
  state_lt: String

  # All values less than or equal the given value.
  state_lte: String

  # All values greater than the given value.
  state_gt: String

  # All values greater than or equal the given value.
  state_gte: String

  # All values containing the given string.
  state_contains: String

  # All values not containing the given string.
  state_not_contains: String

  # All values starting with the given string.
  state_starts_with: String

  # All values not starting with the given string.
  state_not_starts_with: String

  # All values ending with the given string.
  state_ends_with: String

  # All values not ending with the given string.
  state_not_ends_with: String

  #
  Postal_code: String

  # All values that are not equal to given value.
  Postal_code_not: String

  # All values that are contained in given list.
  Postal_code_in: [String!]

  # All values that are not contained in given list.
  Postal_code_not_in: [String!]

  # All values less than the given value.
  Postal_code_lt: String

  # All values less than or equal the given value.
  Postal_code_lte: String

  # All values greater than the given value.
  Postal_code_gt: String

  # All values greater than or equal the given value.
  Postal_code_gte: String

  # All values containing the given string.
  Postal_code_contains: String

  # All values not containing the given string.
  Postal_code_not_contains: String

  # All values starting with the given string.
  Postal_code_starts_with: String

  # All values not starting with the given string.
  Postal_code_not_starts_with: String

  # All values ending with the given string.
  Postal_code_ends_with: String

  # All values not ending with the given string.
  Postal_code_not_ends_with: String

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [AddressSubscriptionWhereInput!]

  # Logical OR on all given filters.
  OR: [AddressSubscriptionWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [AddressSubscriptionWhereInput!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateDataInput {
  city: String
  country: String
  state: String
  Postal_code: String
}

input AddressUpdateInput {
  city: String
  country: String
  state: String
  Postal_code: String
}

input AddressUpdateManyDataInput {
  city: String
  country: String
  state: String
  Postal_code: String
}

input AddressUpdateManyInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  delete: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueNestedInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  deleteMany: [AddressScalarWhereInput!]
  upsert: [AddressUpsertWithWhereUniqueNestedInput!]
}

input AddressUpdateManyMutationInput {
  city: String
  country: String
  state: String
  Postal_code: String
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateDataInput!
}

input AddressUpsertWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

#
type BatchPayload {
  # The number of nodes that have been affected by the Batch operation.
  count: Long!
}

# Raw JSON value
scalar Json

type Mutation {
  createOrder(data: OrderCreateInput!): Order!
  createValidation_Product(
    data: Validation_ProductCreateInput!
  ): Validation_Product!
  createUser(data: UserCreateInput!): User!
  createAddress(data: AddressCreateInput!): Address!
  createProduct(data: ProductCreateInput!): Product!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateValidation_Product(
    data: Validation_ProductUpdateInput!
    where: Validation_ProductWhereUniqueInput!
  ): Validation_Product
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAddress(
    data: AddressUpdateInput!
    where: AddressWhereUniqueInput!
  ): Address
  updateProduct(
    data: ProductUpdateInput!
    where: ProductWhereUniqueInput!
  ): Product
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteValidation_Product(
    where: Validation_ProductWhereUniqueInput!
  ): Validation_Product
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteProduct(where: ProductWhereUniqueInput!): Product
  upsertOrder(
    where: OrderWhereUniqueInput!
    create: OrderCreateInput!
    update: OrderUpdateInput!
  ): Order!
  upsertValidation_Product(
    where: Validation_ProductWhereUniqueInput!
    create: Validation_ProductCreateInput!
    update: Validation_ProductUpdateInput!
  ): Validation_Product!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  upsertAddress(
    where: AddressWhereUniqueInput!
    create: AddressCreateInput!
    update: AddressUpdateInput!
  ): Address!
  upsertProduct(
    where: ProductWhereUniqueInput!
    create: ProductCreateInput!
    update: ProductUpdateInput!
  ): Product!
  updateManyOrders(
    data: OrderUpdateManyMutationInput!
    where: OrderWhereInput
  ): BatchPayload!
  updateManyValidation_Products(
    data: Validation_ProductUpdateManyMutationInput!
    where: Validation_ProductWhereInput
  ): BatchPayload!
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  updateManyAddresses(
    data: AddressUpdateManyMutationInput!
    where: AddressWhereInput
  ): BatchPayload!
  updateManyProducts(
    data: ProductUpdateManyMutationInput!
    where: ProductWhereInput
  ): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyValidation_Products(
    where: Validation_ProductWhereInput
  ): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

input OrderCreateInput {
  id: ID
  total_price: Float!
  status: OrderStatus
  user: UserCreateOneWithoutOrdersInput!
  products: ProductCreateManyInput
}

input OrderCreateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutUserInput {
  id: ID
  total_price: Float!
  status: OrderStatus
  products: ProductCreateManyInput
}

type OrderPreviousValues {
  id: ID!
  total_price: Float!
  status: OrderStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderScalarWhereInput {
  # Logical AND on all given filters.
  AND: [OrderScalarWhereInput!]

  # Logical OR on all given filters.
  OR: [OrderScalarWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [OrderScalarWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  total_price: Float

  # All values that are not equal to given value.
  total_price_not: Float

  # All values that are contained in given list.
  total_price_in: [Float!]

  # All values that are not contained in given list.
  total_price_not_in: [Float!]

  # All values less than the given value.
  total_price_lt: Float

  # All values less than or equal the given value.
  total_price_lte: Float

  # All values greater than the given value.
  total_price_gt: Float

  # All values greater than or equal the given value.
  total_price_gte: Float

  #
  status: OrderStatus

  # All values that are not equal to given value.
  status_not: OrderStatus

  # All values that are contained in given list.
  status_in: [OrderStatus!]

  # All values that are not contained in given list.
  status_not_in: [OrderStatus!]

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [OrderSubscriptionWhereInput!]

  # Logical OR on all given filters.
  OR: [OrderSubscriptionWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [OrderSubscriptionWhereInput!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  total_price: Float
  status: OrderStatus
  user: UserUpdateOneRequiredWithoutOrdersInput
  products: ProductUpdateManyInput
}

input OrderUpdateManyDataInput {
  total_price: Float
  status: OrderStatus
}

input OrderUpdateManyMutationInput {
  total_price: Float
  status: OrderStatus
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderScalarWhereInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput!]
}

input OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutUserDataInput!
}

input OrderUpdateWithoutUserDataInput {
  total_price: Float
  status: OrderStatus
  products: ProductUpdateManyInput
}

input OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutUserDataInput!
  create: OrderCreateWithoutUserInput!
}

enum PrismaDatabase {
  default
}

input ProductCreateInput {
  id: ID
  name: String!
  price: Float!
  stock: Int!
  status: ProductStatus
  user: UserCreateOneWithoutProductsOwnedInput!
}

input ProductCreateManyInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutUserInput {
  create: [ProductCreateWithoutUserInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutUserInput {
  id: ID
  name: String!
  price: Float!
  stock: Int!
  status: ProductStatus
}

type ProductPreviousValues {
  id: ID!
  name: String!
  price: Float!
  stock: Int!
  status: ProductStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductScalarWhereInput {
  # Logical AND on all given filters.
  AND: [ProductScalarWhereInput!]

  # Logical OR on all given filters.
  OR: [ProductScalarWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [ProductScalarWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String

  #
  price: Float

  # All values that are not equal to given value.
  price_not: Float

  # All values that are contained in given list.
  price_in: [Float!]

  # All values that are not contained in given list.
  price_not_in: [Float!]

  # All values less than the given value.
  price_lt: Float

  # All values less than or equal the given value.
  price_lte: Float

  # All values greater than the given value.
  price_gt: Float

  # All values greater than or equal the given value.
  price_gte: Float

  #
  stock: Int

  # All values that are not equal to given value.
  stock_not: Int

  # All values that are contained in given list.
  stock_in: [Int!]

  # All values that are not contained in given list.
  stock_not_in: [Int!]

  # All values less than the given value.
  stock_lt: Int

  # All values less than or equal the given value.
  stock_lte: Int

  # All values greater than the given value.
  stock_gt: Int

  # All values greater than or equal the given value.
  stock_gte: Int

  #
  status: ProductStatus

  # All values that are not equal to given value.
  status_not: ProductStatus

  # All values that are contained in given list.
  status_in: [ProductStatus!]

  # All values that are not contained in given list.
  status_not_in: [ProductStatus!]

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [ProductSubscriptionWhereInput!]

  # Logical OR on all given filters.
  OR: [ProductSubscriptionWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [ProductSubscriptionWhereInput!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateDataInput {
  name: String
  price: Float
  stock: Int
  status: ProductStatus
  user: UserUpdateOneRequiredWithoutProductsOwnedInput
}

input ProductUpdateInput {
  name: String
  price: Float
  stock: Int
  status: ProductStatus
  user: UserUpdateOneRequiredWithoutProductsOwnedInput
}

input ProductUpdateManyDataInput {
  name: String
  price: Float
  stock: Int
  status: ProductStatus
}

input ProductUpdateManyInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueNestedInput!]
}

input ProductUpdateManyMutationInput {
  name: String
  price: Float
  stock: Int
  status: ProductStatus
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateManyWithoutUserInput {
  create: [ProductCreateWithoutUserInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutUserInput!]
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
}

input ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateDataInput!
}

input ProductUpdateWithWhereUniqueWithoutUserInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutUserDataInput!
}

input ProductUpdateWithoutUserDataInput {
  name: String
  price: Float
  stock: Int
  status: ProductStatus
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithWhereUniqueWithoutUserInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutUserDataInput!
  create: ProductCreateWithoutUserInput!
}

type Subscription {
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  validation_Product(
    where: Validation_ProductSubscriptionWhereInput
  ): Validation_ProductSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
}

input UserCreateInput {
  id: ID
  name: String!
  status: UserStatus
  roles: Role
  address: AddressCreateManyInput
  orders: OrderCreateManyWithoutUserInput
  productsOwned: ProductCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProductsOwnedInput {
  create: UserCreateWithoutProductsOwnedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOrdersInput {
  id: ID
  name: String!
  status: UserStatus
  roles: Role
  address: AddressCreateManyInput
  productsOwned: ProductCreateManyWithoutUserInput
}

input UserCreateWithoutProductsOwnedInput {
  id: ID
  name: String!
  status: UserStatus
  roles: Role
  address: AddressCreateManyInput
  orders: OrderCreateManyWithoutUserInput
}

type UserPreviousValues {
  id: ID!
  name: String!
  status: UserStatus!
  roles: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [UserSubscriptionWhereInput!]

  # Logical OR on all given filters.
  OR: [UserSubscriptionWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [UserSubscriptionWhereInput!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  status: UserStatus
  roles: Role
  address: AddressUpdateManyInput
  orders: OrderUpdateManyWithoutUserInput
  productsOwned: ProductUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  status: UserStatus
  roles: Role
  address: AddressUpdateManyInput
  orders: OrderUpdateManyWithoutUserInput
  productsOwned: ProductUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  status: UserStatus
  roles: Role
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateOneRequiredWithoutProductsOwnedInput {
  create: UserCreateWithoutProductsOwnedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProductsOwnedDataInput
  upsert: UserUpsertWithoutProductsOwnedInput
}

input UserUpdateWithoutOrdersDataInput {
  name: String
  status: UserStatus
  roles: Role
  address: AddressUpdateManyInput
  productsOwned: ProductUpdateManyWithoutUserInput
}

input UserUpdateWithoutProductsOwnedDataInput {
  name: String
  status: UserStatus
  roles: Role
  address: AddressUpdateManyInput
  orders: OrderUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput!
  create: UserCreateWithoutOrdersInput!
}

input UserUpsertWithoutProductsOwnedInput {
  update: UserUpdateWithoutProductsOwnedDataInput!
  create: UserCreateWithoutProductsOwnedInput!
}

input Validation_ProductCreateInput {
  id: ID
  status: ValidationStatus
  reviewer: UserCreateOneInput!
  product: ProductCreateOneInput!
}

type Validation_ProductPreviousValues {
  id: ID!
  status: ValidationStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Validation_ProductSubscriptionPayload {
  mutation: MutationType!
  node: Validation_Product
  updatedFields: [String!]
  previousValues: Validation_ProductPreviousValues
}

input Validation_ProductSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [Validation_ProductSubscriptionWhereInput!]

  # Logical OR on all given filters.
  OR: [Validation_ProductSubscriptionWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [Validation_ProductSubscriptionWhereInput!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: Validation_ProductWhereInput
}

input Validation_ProductUpdateInput {
  status: ValidationStatus
  reviewer: UserUpdateOneRequiredInput
  product: ProductUpdateOneRequiredInput
}

input Validation_ProductUpdateManyMutationInput {
  status: ValidationStatus
}

type Address implements Node {
  id: ID!
  city: String!
  country: String!
  state: String!
  Postal_code: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A connection to a list of items.
type AddressConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

# An edge in a connection.
type AddressEdge {
  # The item at the end of the edge.
  node: Address!

  # A cursor for use in pagination.
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  state_ASC
  state_DESC
  Postal_code_ASC
  Postal_code_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AddressWhereInput {
  # Logical AND on all given filters.
  AND: [AddressWhereInput!]

  # Logical OR on all given filters.
  OR: [AddressWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [AddressWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  city: String

  # All values that are not equal to given value.
  city_not: String

  # All values that are contained in given list.
  city_in: [String!]

  # All values that are not contained in given list.
  city_not_in: [String!]

  # All values less than the given value.
  city_lt: String

  # All values less than or equal the given value.
  city_lte: String

  # All values greater than the given value.
  city_gt: String

  # All values greater than or equal the given value.
  city_gte: String

  # All values containing the given string.
  city_contains: String

  # All values not containing the given string.
  city_not_contains: String

  # All values starting with the given string.
  city_starts_with: String

  # All values not starting with the given string.
  city_not_starts_with: String

  # All values ending with the given string.
  city_ends_with: String

  # All values not ending with the given string.
  city_not_ends_with: String

  #
  country: String

  # All values that are not equal to given value.
  country_not: String

  # All values that are contained in given list.
  country_in: [String!]

  # All values that are not contained in given list.
  country_not_in: [String!]

  # All values less than the given value.
  country_lt: String

  # All values less than or equal the given value.
  country_lte: String

  # All values greater than the given value.
  country_gt: String

  # All values greater than or equal the given value.
  country_gte: String

  # All values containing the given string.
  country_contains: String

  # All values not containing the given string.
  country_not_contains: String

  # All values starting with the given string.
  country_starts_with: String

  # All values not starting with the given string.
  country_not_starts_with: String

  # All values ending with the given string.
  country_ends_with: String

  # All values not ending with the given string.
  country_not_ends_with: String

  #
  state: String

  # All values that are not equal to given value.
  state_not: String

  # All values that are contained in given list.
  state_in: [String!]

  # All values that are not contained in given list.
  state_not_in: [String!]

  # All values less than the given value.
  state_lt: String

  # All values less than or equal the given value.
  state_lte: String

  # All values greater than the given value.
  state_gt: String

  # All values greater than or equal the given value.
  state_gte: String

  # All values containing the given string.
  state_contains: String

  # All values not containing the given string.
  state_not_contains: String

  # All values starting with the given string.
  state_starts_with: String

  # All values not starting with the given string.
  state_not_starts_with: String

  # All values ending with the given string.
  state_ends_with: String

  # All values not ending with the given string.
  state_not_ends_with: String

  #
  Postal_code: String

  # All values that are not equal to given value.
  Postal_code_not: String

  # All values that are contained in given list.
  Postal_code_in: [String!]

  # All values that are not contained in given list.
  Postal_code_not_in: [String!]

  # All values less than the given value.
  Postal_code_lt: String

  # All values less than or equal the given value.
  Postal_code_lte: String

  # All values greater than the given value.
  Postal_code_gt: String

  # All values greater than or equal the given value.
  Postal_code_gte: String

  # All values containing the given string.
  Postal_code_contains: String

  # All values not containing the given string.
  Postal_code_not_contains: String

  # All values starting with the given string.
  Postal_code_starts_with: String

  # All values not starting with the given string.
  Postal_code_not_starts_with: String

  # All values ending with the given string.
  Postal_code_ends_with: String

  # All values not ending with the given string.
  Postal_code_not_ends_with: String

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateValidation_Product {
  count: Int!
}

scalar DateTime

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Order implements Node {
  id: ID!
  total_price: Float!
  status: OrderStatus!
  user: User!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A connection to a list of items.
type OrderConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

# An edge in a connection.
type OrderEdge {
  # The item at the end of the edge.
  node: Order!

  # A cursor for use in pagination.
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  total_price_ASC
  total_price_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum OrderStatus {
  DONE
  PENDING
  CANCELLED
}

input OrderWhereInput {
  # Logical AND on all given filters.
  AND: [OrderWhereInput!]

  # Logical OR on all given filters.
  OR: [OrderWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [OrderWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  total_price: Float

  # All values that are not equal to given value.
  total_price_not: Float

  # All values that are contained in given list.
  total_price_in: [Float!]

  # All values that are not contained in given list.
  total_price_not_in: [Float!]

  # All values less than the given value.
  total_price_lt: Float

  # All values less than or equal the given value.
  total_price_lte: Float

  # All values greater than the given value.
  total_price_gt: Float

  # All values greater than or equal the given value.
  total_price_gte: Float

  #
  status: OrderStatus

  # All values that are not equal to given value.
  status_not: OrderStatus

  # All values that are contained in given list.
  status_in: [OrderStatus!]

  # All values that are not contained in given list.
  status_not_in: [OrderStatus!]

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  user: UserWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Product implements Node {
  id: ID!
  name: String!
  price: Float!
  stock: Int!
  status: ProductStatus!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A connection to a list of items.
type ProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

# An edge in a connection.
type ProductEdge {
  # The item at the end of the edge.
  node: Product!

  # A cursor for use in pagination.
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  stock_ASC
  stock_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum ProductStatus {
  OUT_OF_STOCK
  BANNED
  IN_STOCK
}

input ProductWhereInput {
  # Logical AND on all given filters.
  AND: [ProductWhereInput!]

  # Logical OR on all given filters.
  OR: [ProductWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [ProductWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String

  #
  price: Float

  # All values that are not equal to given value.
  price_not: Float

  # All values that are contained in given list.
  price_in: [Float!]

  # All values that are not contained in given list.
  price_not_in: [Float!]

  # All values less than the given value.
  price_lt: Float

  # All values less than or equal the given value.
  price_lte: Float

  # All values greater than the given value.
  price_gt: Float

  # All values greater than or equal the given value.
  price_gte: Float

  #
  stock: Int

  # All values that are not equal to given value.
  stock_not: Int

  # All values that are contained in given list.
  stock_in: [Int!]

  # All values that are not contained in given list.
  stock_not_in: [Int!]

  # All values less than the given value.
  stock_lt: Int

  # All values less than or equal the given value.
  stock_lte: Int

  # All values greater than the given value.
  stock_gt: Int

  # All values greater than or equal the given value.
  stock_gte: Int

  #
  status: ProductStatus

  # All values that are not equal to given value.
  status_not: ProductStatus

  # All values that are contained in given list.
  status_in: [ProductStatus!]

  # All values that are not contained in given list.
  status_not_in: [ProductStatus!]

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  orders(
    where: OrderWhereInput
    orderBy: OrderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Order]!
  validation_Products(
    where: Validation_ProductWhereInput
    orderBy: Validation_ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Validation_Product]!
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  addresses(
    where: AddressWhereInput
    orderBy: AddressOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Address]!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product]!
  order(where: OrderWhereUniqueInput!): Order
  validation_Product(
    where: Validation_ProductWhereUniqueInput!
  ): Validation_Product
  user(where: UserWhereUniqueInput!): User
  address(where: AddressWhereUniqueInput!): Address
  product(where: ProductWhereUniqueInput!): Product
  ordersConnection(
    where: OrderWhereInput
    orderBy: OrderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OrderConnection!
  validation_ProductsConnection(
    where: Validation_ProductWhereInput
    orderBy: Validation_ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Validation_ProductConnection!
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  addressesConnection(
    where: AddressWhereInput
    orderBy: AddressOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): AddressConnection!
  productsConnection(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

enum Role {
  USER
  ADMIN
}

type User implements Node {
  id: ID!
  name: String!
  address(
    where: AddressWhereInput
    orderBy: AddressOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Address!]
  status: UserStatus!
  roles: Role!
  orders(
    where: OrderWhereInput
    orderBy: OrderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Order!]
  productsOwned(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
  roles_ASC
  roles_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum UserStatus {
  BANNED
  SUSPENDED
  FINE
}

input UserWhereInput {
  # Logical AND on all given filters.
  AND: [UserWhereInput!]

  # Logical OR on all given filters.
  OR: [UserWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [UserWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String

  #
  status: UserStatus

  # All values that are not equal to given value.
  status_not: UserStatus

  # All values that are contained in given list.
  status_in: [UserStatus!]

  # All values that are not contained in given list.
  status_not_in: [UserStatus!]

  #
  roles: Role

  # All values that are not equal to given value.
  roles_not: Role

  # All values that are contained in given list.
  roles_in: [Role!]

  # All values that are not contained in given list.
  roles_not_in: [Role!]

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  address_every: AddressWhereInput
  address_some: AddressWhereInput
  address_none: AddressWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  productsOwned_every: ProductWhereInput
  productsOwned_some: ProductWhereInput
  productsOwned_none: ProductWhereInput
}

input UserWhereUniqueInput {
  id: ID
}

enum ValidationStatus {
  REJECTED
  ACCEPTED
  PENDING
}

type Validation_Product implements Node {
  id: ID!
  reviewer: User!
  product: Product!
  status: ValidationStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A connection to a list of items.
type Validation_ProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [Validation_ProductEdge]!
  aggregate: AggregateValidation_Product!
}

# An edge in a connection.
type Validation_ProductEdge {
  # The item at the end of the edge.
  node: Validation_Product!

  # A cursor for use in pagination.
  cursor: String!
}

enum Validation_ProductOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input Validation_ProductWhereInput {
  # Logical AND on all given filters.
  AND: [Validation_ProductWhereInput!]

  # Logical OR on all given filters.
  OR: [Validation_ProductWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [Validation_ProductWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  status: ValidationStatus

  # All values that are not equal to given value.
  status_not: ValidationStatus

  # All values that are contained in given list.
  status_in: [ValidationStatus!]

  # All values that are not contained in given list.
  status_not_in: [ValidationStatus!]

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  reviewer: UserWhereInput
  product: ProductWhereInput
}

input Validation_ProductWhereUniqueInput {
  id: ID
}

# The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
scalar Long
